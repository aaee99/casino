use rand::prelude::*;
use std::io;
// –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∫—Ä–∞—Å–Ω–æ–µ –∏–ª–∏ –Ω–∞ —á–µ—Ä–Ω–æ–µ
// –ë–∞–ª–∞–Ω—Å
// –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —á–∏—Å–ª–æ
// –º–æ–∂–Ω–æ –∫—Ä—É—Ç–∏—Ç—å —Å–ª–æ—Ç—ã –≥–¥–µ
// –º–æ—Ä–∫–æ–≤–∫–∞ —Å–µ–º–µ—Ä–∫–∏ –∫–∞–∫–∞—à–∫–∏ –≤–∏—à–Ω—è
struct Player {
    balance: i32,
    bid: i32,
}
impl Player {
    fn add_balance(&mut self, sum: i32) {
        self.balance += sum;
    }
    // fn check_balance(&self) -> i32{
    //     self.balance
    // }
    fn add_bid(&mut self, sum: i32) {
        self.bid += sum;
    }
}
fn main() {
    println!(
        "
        
                                                     
                            ,,                       
                            db                       
                                                     
 ,p6*bo   ,6*Yb.  ,pP*Ybd `7MM  `7MMpMMMb.  ,pW*Wq.  
6M'  OO  8)   MM  8I   `*   MM    MM    MM 6W'   `Wb 
8M        ,pm9MM  `YMMMa.   MM    MM    MM 8M     M8 
YM.    , 8M   MM  L.   I8   MM    MM    MM YA.   ,A9 
 YMbmd'  `Moo9^Yo.M9mmmP' .JMML..JMML  JMML.`Ybmd9'  
                                                     
                                                     

    "
    );
    let mut rng = rand::rng();
    let mut player = Player {
        balance: 100,
        bid: 10,
    };
    // loop {
    //
    //     // let n = random(&mut rng);
    //     // println!("{n}");
    // };

    loop {
        // println!("\n\n\n\n\n\n\n");

        hud(&player);
        println!("–≤–æ —á—Ç–æ –∏–≥—Ä–∞—Ç—å");
        println!("
        1. –ö—Ä–∞—Å–Ω–æ–µ/–ß–µ—Ä–Ω–æ–µ
           2. –°–ª–æ—Ç—ã
             3. –°—Ç–∞–≤–∏—Ç—å –Ω–∞ —á–∏—Å–ª–æ
        ");
        match input().as_str() {
            "1" => {
                // println!("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
                hud(&player);
                // println!("–¢–´ –í–´–ë–†–ê–õ 1. –ö—Ä–∞—Å–Ω–æ–µ/–ß–µ—Ä–Ω–æ–µ");

                // let i = red_and_black(&mut rng);
                // match input().trim().parse::<u32>(){
                //     Ok(n) => n,
                //     Err(_) => {
                //         println!("–û—à–∏–±–∫–∞");
                //         return;
                //     }
                // }
                if player.balance >= player.bid && player.bid > 0 {
                    red_and_black(&mut rng, &mut player);
                } else{
                    println!("
                    üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥
                    –£ –¢–ï–ë–Ø –ù–ï–¢–£ –ë–ê–õ–ê–ù–°–ê –õ–ò–ë–û –°–¢–ê–í–ö–ê –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø
                    üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥üî¥
                    ");
                    continue
                }
            }
            "w" | "W" => {
                player.add_bid(10);
            }
            "s" | "S" => {
                player.add_bid(-10);
            }
            &_ => continue,
        };
    }
}
fn random(rng: &mut ThreadRng) -> u32 {
    rng.random_range(1..10000)
}
fn input() -> String {
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞");
    input.trim().to_string()
}
fn red_and_black(rng: &mut ThreadRng, player: &mut Player) {
    let result = rng.random_range(1..=37);
    let mut mult: f32 = 1.0;
    println!("–¢–ï–ü–ï–†–¨ –í–´–ë–ï–†–ò –¶–í–ï–¢");
    println!("
    1 –ö—Ä–∞—Å–Ω–æ–µ üî¥
      2 –ß–µ—Ä–Ω–æ–µ üñ§
       3 –ó–µ–ª–µ–Ω–æ–µ üíö
    ");
    let win = match input().as_str() {
        "1" => {
            player.add_balance(-player.bid);
            println!("
            ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
            ");
            mult = 2.0;
            (1..=18).contains(&result)
        }

        "2" => {
            player.add_balance(-player.bid);
            println!("
            üñ§üñ§üñ§üñ§üñ§üñ§üñ§üñ§üñ§üñ§üñ§üñ§
            ");
            mult = 2.0;
            (18..=36).contains(&result)
        }
        "3" => {
            player.add_balance(-player.bid);
            println!("
            üíöüíöüíöüíöüíöüíöüíöüíöüíöüíöüíöüíöüíöüíö
            ");
            mult = 20.0;
            result == 37
        }
        &_ => return,
    };

    if win {
        println!(
            "
        
 ######  ##   ## ##   ## ####### ######     ####   ##### 
 ##   ## ##   ## ##  ### ##      ##   ##   ## ##  ##  ## 
 ##   ## ##   ## ##  ### ##      ##   ##  ##  ##  ##  ## 
 ######  ####  # ## # ## ##      ######  ##   ##  ##  ## 
 ##   ## ##  # # ###  ## ##      ##      #######  ##  ## 
 ##   ## ##  # # ##   ## ##      ##      ##   ##  ##  ## 
 ######  ####  # ##   ## ##      ##      ##   ## ##   ## 
                                                         

        "
        );
        let sum = (player.bid as f32 * mult).round() as i32;
        player.add_balance(sum);
    } else {
        println!(
            "
        
 ####### ######   #####  ##   ## ####### ######     ####   ##### 
 ##   ## ##   ## ##   ## ##  ### ##      ##   ##   ## ##  ##  ## 
 ##   ## ##   ## ##   ## ##  ### ##      ##   ##  ##  ##  ##  ## 
 ##   ## ######  ##   ## ## # ## ##      ######  ##   ##  ##  ## 
 ##   ## ##      ##   ## ###  ## ##      ##      #######  ##  ## 
 ##   ## ##      ##   ## ##   ## ##      ##      ##   ##  ##  ## 
 ##   ## ##       #####  ##   ## ##      ##      ##   ## ##   ## 
                                                                 

        "
        );
    }
}
fn hud(player: &Player) {
    println!("
            –ë–∞–ª–∞–Ω—Å: {}
    ", player.balance);
    println!("
        C—Ç–∞–≤–∫–∞: {}
    ", player.bid);
    println!("
    + –£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É W
     - –£–º–µ–Ω—å—à–∏—Ç—å —Å—Ç–∞–≤–∫—É S
    ")
}
